#+TITLE: Emacs Configuration
#+OPTIONS: toc:nil num:nil

* Basic Env Conf
** Configure =use-package=
#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src
Always compile packages, and use the newest version available.
#+begin_src emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+end_src
** get Path
#+begin_src emacs-lisp
(use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src
** Who am I? Where am I?

#+begin_src emacs-lisp
  (setq user-full-name "Gregor Willenbrock"
        user-mail-address "g@wbrck.de")
#+end_src

* evil mode

Load and configure =evil-mode=.

I'd prefer not to expand abbrevs when I hit escape. That's always jarring and
usually not what I want. In particular, it makes working with Coq really
frustrating.

Don't automatically load Evil bindings in different modes.

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-abbrev-expand-on-insert-exit nil
          evil-want-keybinding nil)

    :config
    (evil-mode 1))
#+end_src

Install =evil-collection=, which provides evil-friendly bindings for many modes.

#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list
          '(ag dired magit mu4e which-key))
    (evil-collection-init))
#+end_src

Enable =surround= everywhere.

#+begin_src emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))
#+end_src

Use =evil= with Org agendas.

#+begin_src emacs-lisp
  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda () (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

* UI preferences

#+begin_src emacs-lisp
  
(setq inhibit-splash-screen t
      initial-scratch-message nil)
    (tool-bar-mode 0)
    (menu-bar-mode 0)
  (scroll-bar-mode -1)
(global-display-line-numbers-mode)
(setq display-line-numbers-type 'relative)
#+end_src

** Theme & Modeline

#+begin_src emacs-lisp
(use-package dracula-theme
    :demand)
(use-package doom-modeline
  :init (doom-modeline-mode 1))
(use-package all-the-icons)
#+end_src

** Disable visual bell

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Font
#+begin_src emacs-lisp
(setq hrs/default-font "SF Mono")
(setq hrs/default-font-size 16)
(setq hrs/current-font-size hrs/default-font-size)

(setq hrs/font-change-increment 1.1)

(defun hrs/font-code ()
  "Return a string representing the current font (like \"Inconsolata-14\")."
  (concat hrs/default-font "-" (number-to-string hrs/current-font-size)))

(defun hrs/set-font-size ()
  "Set the font to `hrs/default-font' at `hrs/current-font-size'.
Set that for the current frame, and also make it the default for
other, future frames."
  (let ((font-code (hrs/font-code)))
    (if (assoc 'font default-frame-alist)
        (setcdr (assoc 'font default-frame-alist) font-code)
      (add-to-list 'default-frame-alist (cons 'font font-code)))
    (set-frame-font font-code)))

(defun hrs/reset-font-size ()
  "Change font size back to `hrs/default-font-size'."
  (interactive)
  (setq hrs/current-font-size hrs/default-font-size)
  (hrs/set-font-size))

(defun hrs/increase-font-size ()
  "Increase current font size by a factor of `hrs/font-change-increment'."
  (interactive)
  (setq hrs/current-font-size
        (ceiling (* hrs/current-font-size hrs/font-change-increment)))
  (hrs/set-font-size))

(defun hrs/decrease-font-size ()
  "Decrease current font size by a factor of `hrs/font-change-increment', down to a minimum size of 1."
  (interactive)
  (setq hrs/current-font-size
        (max 1
             (floor (/ hrs/current-font-size hrs/font-change-increment))))
  (hrs/set-font-size))

(define-key global-map (kbd "C-)") 'hrs/reset-font-size)
(define-key global-map (kbd "C-+") 'hrs/increase-font-size)
(define-key global-map (kbd "C-=") 'hrs/increase-font-size)
(define-key global-map (kbd "C-_") 'hrs/decrease-font-size)
(define-key global-map (kbd "C--") 'hrs/decrease-font-size)

(hrs/reset-font-size)
#+end_src

* Completion etc

#+begin_src emacs-lisp
(use-package which-key
  :config (which-key-mode))
  
(use-package counsel
  :bind
  ("M-x" . 'counsel-M-x)
  ("C-s" . 'swiper)

  :config
  (use-package flx)
  (use-package smex)

  (ivy-mode 1))
  ;  (setq ivy-use-virtual-buffers t)
  ;  (setq ivy-count-format "(%d/%d) ")
  ;  (setq ivy-initial-inputs-alist nil)
  ;(setq ivy-re-builders-alist
  ;      '((swiper . ivy--regex-plus)
  ;        (t . ivy--regex-fuzzy))))
#+end_src

*** TODO checkout company completion later   

* Git
Highlighting of latest changes.
#+begin_src emacs-lisp
(use-package diff-hl
  :config
  (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
  (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+end_src

#+begin_src emacs-lisp

(use-package magit
  :bind
  ("C-x g" . magit-status)

  :config
  (use-package evil-magit)
  (use-package with-editor)

  (setq magit-push-always-verify nil
        git-commit-summary-max-length 50)

  (add-hook 'with-editor-mode-hook 'evil-insert-state))
#+end_src
* Org
** Main Org Conf
   (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "SOMEDAY(s)" "|" "DONE(d)" "CANCELLED(c)")))
** Ref etc
*** Using org-ref
#+begin_src emacs-lisp
(use-package org-ref
    :init
    ;; setup org-ref
    (setq org-ref-bibliography-notes "~/Dropbox/Apps/MobileOrg/bibnotes.org"
          org-ref-default-bibliography '("~/Documents/Bibliothek/main.bib")
          org-ref-pdf-directory "~/Documents/Bibliothek/pdfs/")
    (unless (file-exists-p org-ref-pdf-directory)
      (make-directory org-ref-pdf-directory t))
    ;; Some org-mode customization
    (setq org-src-fontify-natively t
      org-confirm-babel-evaluate nil
      org-src-preserve-indentation t)
    (setq bibtex-autokey-year-length 4
      bibtex-autokey-name-year-separator "-"
      bibtex-autokey-year-title-separator "-"
      bibtex-autokey-titleword-separator "-"
      bibtex-autokey-titlewords 2
      bibtex-autokey-titlewords-stretch 1
      bibtex-autokey-titleword-length 5)      
      (setq org-latex-default-packages-alist
      (-remove-item
       '("" "hyperref" nil)
       org-latex-default-packages-alist))
    ;; Append new packages
    (add-to-list 'org-latex-default-packages-alist '("" "natbib" "") t)
    (add-to-list 'org-latex-default-packages-alist
	     '("linktocpage,pdfstartview=FitH,colorlinks,
    linkcolor=blue,anchorcolor=blue,
    citecolor=blue,filecolor=blue,menucolor=blue,urlcolor=blue"
	       "hyperref" nil)
	     t)
    :config)

#+end_src

*** And ox-pandoc for exporting 
#+begin_src emacs-lisp
(use-package ox-pandoc
    :config
    (setq org-pandoc-options-for-docx '((standalone . nil))
    ))
#+end_src 



