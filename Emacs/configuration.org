* Basic UI Configuration
This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.
#+begin_src emacs-lisp
    (setq inhibit-startup-message t)
    (setq frame-resize-pixelwise t)

    (scroll-bar-mode -1)        ; Disable visible scrollbar
    (tool-bar-mode -1)          ; Disable the toolbar
    (tooltip-mode -1)           ; Disable tooltips
    (set-fringe-mode 10)        ; Give some breathing room

    (menu-bar-mode -1)            ; Disable the menu bar

    ;; Set up the visible bell
    (setq visible-bell t)

    (column-number-mode)
    (global-display-line-numbers-mode t)

    ;; Disable line numbers for some modes
    (dolist (mode '(org-mode-hook
                    term-mode-hook
                      pdf-view-mode-hook
                    shell-mode-hook
                    treemacs-mode-hook
                    eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
    backup-by-copying t    ; Don't delink hardlinks
    version-control t      ; Use version numbers on backups
    delete-old-versions t  ; Automatically delete excess backups
    kept-new-versions 20   ; how many of the newest versions to keep
    kept-old-versions 5    ; and how many of the old
    )

#+end_src

** Mac specific Config

#+begin_src emacs-lisp
(when (equal system-type 'darwin)
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier 'none)
  (setq insert-directory-program "gls")
  (use-package ns-auto-titlebar
    :init (ns-auto-titlebar-mode +1))
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8))

(when (equal system-type 'darwin)
  (defun ns-raise-emacs ()
    "Raise Emacs."
    (ns-do-applescript "tell application \"Emacs\" to activate"))
(defun ns-raise-emacs-with-frame (frame)
    "Raise Emacs and select the provided frame."
    (with-selected-frame frame
      (when (display-graphic-p)
        (ns-raise-emacs))))
(add-hook 'after-make-frame-functions 'ns-raise-emacs-with-frame)
(when (display-graphic-p)
    (ns-raise-emacs)))
#+end_src

** Font Configuration
#+begin_src emacs-lisp
  (defun gwbrck/set-font-faces ()
    (set-face-attribute 'default nil :font "Fira Code" :height 150)
    (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height 1.0)
    (set-face-attribute 'variable-pitch nil :font "Cantarell" :weight 'regular :height 1.0)

      (dolist (face '((org-level-1 . 1.2)
                      (org-level-2 . 1.1)
                      (org-level-3 . 1.1)
                      (org-level-4 . 1.0)
                      (org-level-5 . 1.0)
                      (org-level-6 . 1.0)
                      (org-level-7 . 1.0)
                      (org-level-8 . 1.0)))
        (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

   (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
   (set-face-attribute 'org-code nil   :inherit 'fixed-pitch)
   (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
   (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
   (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
   (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
   (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
   (set-face-attribute 'org-hide nil :inherit 'fixed-pitch)
   (set-face-attribute 'org-block-begin-line nil :height 0.8))

  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (setq doom-modeline-icon t)
                  (with-selected-frame frame
                    (gwbrck/set-font-faces))))
      (gwbrck/set-font-faces))
#+end_src

* Keybinding Configuration:


This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.  [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

#+begin_src emacs-lisp
  
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-M-u") 'universal-argument)
  (use-package general
    :config
    (general-create-definer gwbrck/leader-keys
      :prefix "SPC"
      :global-prefix "C-SPC")
  
    (gwbrck/leader-keys
      :keymaps '(normal insert visual emacs)
      "b"  '(:ignore t :which-key "buffer")
      "bk" '(kill-this-buffer :which-key "kill buffer")
      "bs" '(consult-buffer :which-key "list buffer")
      "bn" '(next-buffer :which-key "next buffer")
      "bN" '(previous-buffer :which-key "prev buffer")
      "t"  '(:ignore t :which-key "toggles")
      "tw" '(whitespace-mode :which-key "whitespace" )
      "tt" '(load-theme :which-key "choose theme"))
   (gwbrck/leader-keys
      :keymaps '(normal insert visual emacs)
     "f"   '(:ignore t :which-key "files")
     "fB"  '((lambda () (interactive) (find-file "~/Documents/myBib")) :which-key "Bib Folder")
     "fb"  '(bibtex-actions-open :which-key "Bib")
     "fr" '(:ignore t :which-key "roam")
     "frR"  '(org-roam-find-file :which-key "roam find file+")
     "frr"  '(orb-find-non-ref-file :which-key "roam find file")
     "frd" '(:ignore t :which-key "dailies")
     "frdf" '(org-roam-dailies-find-today :which-key "open today")
     "frdF" '(org-roam-dailies-find-date :which-key "open date")
     "frdc" '(org-roam-dailies-capture-today :which-key "capture today")
     "frdC" '(org-roam-dailies-capture-date :which-key "capture date")
     "ff"  '((lambda () (interactive) (find-file "~/Documents")) :which-key "Documents")
     "fc"  '((lambda () (interactive) (find-file "~/Code")) :which-key "Code")
     "fd"  '(:ignore t :which-key "dotfiles")
     "fdz" '((lambda () (interactive) (find-file "~/dotfiles/zsh")) :which-key "zsh")
     "fdv" '((lambda () (interactive) (find-file "~/dotfiles/Neovim/.config")) :which-key "Neovim")
     "fdd" '((lambda () (interactive) (find-file"~/dotfiles")) :which-key "dotfiles")
     "fde" '((lambda () (interactive) (find-file "~/dotfiles/Emacs/configuration.org")) :which-key "Emacs")))
  
  
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
  
    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
 
    (defun gwbrck/evil-yank-advice (orig-fn beg end &rest args)
      (pulse-momentary-highlight-region beg end 'highlight)
      (apply orig-fn beg end args))
    (advice-add 'evil-yank :around 'gwbrck/evil-yank-advice))
  
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
  
  (use-package evil-snipe
    :after evil-collection
    :config
    (evil-snipe-mode +1)
    (evil-snipe-override-mode +1)
    (setq evil-snipe-scope 'buffer))
  
  
#+end_src

* UI Configuration
** Color Theme


#+begin_src emacs-lisp

(use-package doom-themes
  :init (load-theme 'doom-vibrant t))

#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.1))

#+end_src

** Selectrum, Consult, Orderlerss, Embark & Marginalia

#+begin_src emacs-lisp
  
  (use-package orderless
    :ensure t
    :custom (completion-styles '(orderless)))
  
  (use-package selectrum
    :config
    (selectrum-mode +1)
    (savehist-mode))

  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode))
  
  
  (use-package embark
    :ensure t
    :bind
    (("M-o" . embark-act)       ;; pick some comfortable binding
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))
  
  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
  
  
  ;; Example configuration for Consult
  (use-package consult
     :bind (;; C-c bindings (mode-specific-map)
            ("C-c h" . consult-history)
            ("C-c m" . consult-mode-command)
            ("C-c b" . consult-bookmark)
            ("C-c k" . consult-kmacro)
            ;; C-x bindings (ctl-x-map)
            ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
            ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
            ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
            ;; Custom M-# bindings for fast register access
            ("M-#" . consult-register-load)
            ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
            ("C-M-#" . consult-register)
            ;; Other custom bindings
            ("M-y" . consult-yank-pop)                ;; orig. yank-pop
            ("<help> a" . consult-apropos)            ;; orig. apropos-command
            ;; M-g bindings (goto-map)
            ("M-g e" . consult-compile-error)
            ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
            ("M-g g" . consult-goto-line)             ;; orig. goto-line
            ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
            ("M-g o" . consult-outline)
            ("M-g m" . consult-mark)
            ("M-g k" . consult-global-mark)
            ("M-g i" . consult-imenu)
            ("M-g I" . consult-project-imenu)
            ;; M-s bindings (search-map)
            ("M-s f" . consult-find)
            ("M-s L" . consult-locate)
            ("M-s g" . consult-grep)
            ("M-s G" . consult-git-grep)
            ("M-s r" . consult-ripgrep)
            ("C-s" . consult-line)
            ("M-s m" . consult-multi-occur)
            ("M-s k" . consult-keep-lines)
            ("M-s u" . consult-focus-lines)
            ;; Isearch integration
            ("M-s e" . consult-isearch)
            :map isearch-mode-map
            ("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
            ("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
            ("M-s l" . consult-line))                 ;; required by consult-line to detect isearch
     :init
  
     ;; Optionally configure the register formatting. This improves the register
     ;; preview for `consult-register', `consult-register-load',
     ;; `consult-register-store' and the Emacs built-ins.
     (setq register-preview-delay 0
           register-preview-function #'consult-register-format)
  
     ;; Optionally tweak the register preview window.
     ;; This adds thin lines, sorting and hides the mode line of the window.
     (advice-add #'register-preview :override #'consult-register-window)
  
     ;; Use Consult to select xref locations with preview
     (setq xref-show-xrefs-function #'consult-xref
           xref-show-definitions-function #'consult-xref)
  
     ;; Configure other variables and modes in the :config section,
     ;; after lazily loading the package.
     :config
  
     ;; Optionally configure preview. The default value
     ;; is 'any, such that any key triggers the preview.
     ;; (setq consult-preview-key 'any)
     ;; (setq consult-preview-key (kbd "M-."))
     ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
     ;; For some commands and buffer sources it is useful to configure the
     ;; :preview-key on a per-command basis using the `consult-customize' macro.
     (consult-customize
      consult-ripgrep consult-git-grep consult-grep consult-bookmark consult-recent-file
      consult--source-file consult--source-project-file consult--source-bookmark
      :preview-key (kbd "M-."))
  
     ;; Optionally configure the narrowing key.
     ;; Both < and C-+ work reasonably well.
     (setq consult-narrow-key "<") ;; (kbd "C-+")
  
     ;; Optionally make narrowing help available in the minibuffer.
     ;; You may want to use `embark-prefix-help-command' or which-key instead.
     ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)
  
     ;; Optionally configure a function which returns the project root directory.
     ;; There are multiple reasonable alternatives to chose from.
     ;;;; 1. project.el (project-roots)
     (setq consult-project-root-function
           (lambda ()
             (when-let (project (project-current))
               (car (project-roots project)))))
     ;;;; 2. projectile.el (projectile-project-root)
     ;; (autoload 'projectile-project-root "projectile")
     ;; (setq consult-project-root-function #'projectile-project-root)
     ;;;; 3. vc.el (vc-root-dir)
     ;; (setq consult-project-root-function #'vc-root-dir)
     ;;;; 4. locate-dominating-file
     ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
   )
  
#+end_src

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** Text Scaling

This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen.  We define a hydra that is bound to =C-s t s= and, once activated, =j= and =k= increase and decrease the text scale.  You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (gwbrck/leader-keys
    :keymaps '(normal insert visual emacs)
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+end_src
** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

* PDF-Tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-tools-install)
    (setq pdf-view-use-scaling 2)
    (setq pdf-view-use-imagekick nil))


  (use-package org-noter)

#+end_src

* Org Mode
** Default Paths
#+begin_src emacs-lisp
  (setq gwbrck/bib '("~/Documents/myBib/main.bib"))
  (setq gwbrck/pdfs  "~/Documents/myBib/pdfs/")
  (setq gwbrck/roam "~/Documents/myBib/Roam/")
  (setq org-directory gwbrck/roam)
#+end_src

** Basic Config

This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.  There's a lot to unpack in here so I'd recommend watching the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] for a full explanation.

#+begin_src emacs-lisp
  
  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (gwbrck/set-font-faces)
    (visual-line-mode 1))
  
  (setq org-ellipsis " ▾")
  
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  
  (setq org-agenda-files (directory-files-recursively gwbrck/roam "\\.org$"))
  
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
          (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))
  
  
  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
  
  
  ;; Configure custom agenda views
  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))
            (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))
  
          ("n" "Next Tasks"
           ((todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))
  
          ("W" "Work Tasks" tags-todo "+work-email")
  
          ;; Low-effort next actions
          ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Tasks")
            (org-agenda-max-todos 20)
            (org-agenda-files org-agenda-files)))
  
          ("w" "Workflow Status"
           ((todo "WAIT"
                  ((org-agenda-overriding-header "Waiting on External")
                   (org-agenda-files org-agenda-files)))
            (todo "REVIEW"
                  ((org-agenda-overriding-header "In Review")
                   (org-agenda-files org-agenda-files)))
            (todo "PLAN"
                  ((org-agenda-overriding-header "In Planning")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "BACKLOG"
                  ((org-agenda-overriding-header "Project Backlog")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "READY"
                  ((org-agenda-overriding-header "Ready for Work")
                   (org-agenda-files org-agenda-files)))
            (todo "ACTIVE"
                  ((org-agenda-overriding-header "Active Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "COMPLETED"
                  ((org-agenda-overriding-header "Completed Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "CANC"
                  ((org-agenda-overriding-header "Cancelled Projects")
             (org-agenda-files org-agenda-files)))))))
  
  (define-key global-map (kbd "C-c j")
    (lambda () (interactive) (org-capture nil "jj")))
  
  ;;(gwbrck/set-font-faces)
  
  
#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src
*** TOC Mode
#+begin_src emacs-lisp
(use-package org-make-toc
  :hook (org-mode . org-make-toc-mode))
#+end_src 
*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 110
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

** Bib & Roam
*** Standi Configs
#+begin_src emacs-lisp
  (require 'bibtex)
  (setq bibtex-dialect 'biblatex)
  (setq bibtex-entry-format '(opts-or-alts
                              numerical-fields
                              whitespace
                              realign
                              last-comma
                              delimiters
                              unify-case
                              sort-fields
                              delimiters
                              required-fields))
  (setq bibtex-autokey-name-year-separator "_"
        bibtex-autokey-year-title-separator "_"
        bibtex-autokey-titlewords 1
        bibtex-autokey-year-length 4
        bibtex-autokey-edit-before-use nil
        bibtex-autokey-additional-names 1
        bibtex-autokey-titleword-ignore '("A" "An" "On" "The" "Eine" "Ein" "Der" "Die" "Das")
        bibtex-autokey-titlewords-stretch 0
        bibtex-autokey-titleword-length 5
        bibtex-autokey-name-separator "-"
        bibtex-autokey-names 2
        bibtex-autokey-additional-names "-ea"
        bibtex-comma-after-last-field t)
  (add-to-list 'bibtex-autokey-name-change-strings '("ß" . "ss"))
  (add-to-list 'bibtex-autokey-name-change-strings '("å" . "a"))
  (add-to-list 'bibtex-autokey-name-change-strings '("Å" . "A"))
  (add-to-list 'bibtex-autokey-name-change-strings '("ö" . "oe"))
  (add-to-list 'bibtex-autokey-name-change-strings '("Ö" . "Oe"))
  (add-to-list 'bibtex-autokey-name-change-strings '("ä" . "ae"))
  (add-to-list 'bibtex-autokey-name-change-strings '("Ä" . "Ae"))
  (add-to-list 'bibtex-autokey-name-change-strings '("Ü" . "Ue"))
  (add-to-list 'bibtex-autokey-name-change-strings '("ü" . "ue"))
  (add-to-list 'bibtex-autokey-titleword-change-strings '("ß" . "ss"))
  (add-to-list 'bibtex-autokey-titleword-change-strings '("å" . "a"))
  (add-to-list 'bibtex-autokey-titleword-change-strings '("Å" . "A"))
  (add-to-list 'bibtex-autokey-titleword-change-strings '("ö" . "oe"))
  (add-to-list 'bibtex-autokey-titleword-change-strings '("Ö" . "Oe"))
  (add-to-list 'bibtex-autokey-titleword-change-strings '("ä" . "ae"))
  (add-to-list 'bibtex-autokey-titleword-change-strings '("Ä" . "Ae"))
  (add-to-list 'bibtex-autokey-titleword-change-strings '("Ü" . "Ue"))
  (add-to-list 'bibtex-autokey-titleword-change-strings '("ü" . "ue"))
  
  (use-package biblio
    :init
    (setq biblio-cleanup-bibtex-function 'gwbrck/bibtex-clean-entry))
  
  (use-package bibtex-completion
    :after biblio
    :init
    (setq bibtex-completion-bibliography gwbrck/bib)
    (setq bibtex-completion-notes-path (concat gwbrck/roam "Konspekte/"))
    (setq bibtex-completion-library-path gwbrck/pdfs)
    (setq bibtex-completion-edit-notes-function 'orb-edit-notes-ad)
    (setq bibtex-completion-pdf-open-function
          (lambda (fpath)
            (call-process "open" nil 0 nil fpath))))
  
  
  (use-package bibtex-actions
    :bind (("C-c b" . bibtex-actions-refresh))
    :after embark
    :config
    ;; Make the 'bibtex-actions' bindings available from `embark-act'.
    (add-to-list 'embark-keymap-alist '(bibtex . bibtex-actions-map))
    (setq bibtex-actions-symbols
          `((pdf . (,(all-the-icons-icon-for-file "foo.pdf"
                                                  :face 'all-the-icons-dred) .
                    ,(all-the-icons-icon-for-file "foo.pdf"
                                                  :face 'bibtex-actions-icon-dim)))
            (note . (,(all-the-icons-icon-for-file "foo.txt") .
                     ,(all-the-icons-icon-for-file "foo.txt"
                                                  :face 'bibtex-actions-icon-dim)))        
            (link . 
                  (,(all-the-icons-faicon "external-link-square"
                                          :v-adjust 0.02
                                          :face 'all-the-icons-dpurple) .
                   ,(all-the-icons-faicon "external-link-square"
                                          :v-adjust 0.02
                                          :face 'bibtex-actions-icon-dim)))))
    (defface bibtex-actions-icon-dim
      '((((background dark)) :foreground "#282c34")
        (((background light)) :foreground "#fafafa"))
      "Face for obscuring/dimming icons"
      :group 'all-the-icons-faces))
  
  
    (gwbrck/leader-keys
      :keymaps 'bibtex-mode-map
      :states 'normal
      "m"  '(:ignore t :which-key "bibtex mode")
      "mm" '(bibtex-actions-at-point :which-key "bibtex actions")
      "md" '(doi-utils-add-bibtex-entry-from-doi :which-key "get bibtex via doi")
      "mu" '(doi-utils-update-bibtex-entry-from-doi :which-key "update bibtex via doi")
      "ms" '(bibtex-sort-buffer :which-key "sort entries")
      "mc" '(gwbrck/bibtex-clean-entry :which-key "clean entry"))
  
  
    (gwbrck/leader-keys
      :keymaps 'org-mode-map
      :states 'normal
      "m"  '(:ignore t :which-key "org mode")
      "mo" '(org-ref-cite-hydra/body :which-key "org-ref")
      "mR" '(org-roam-insert :which-key "roam insert+")
      "mr" '(orb-insert-non-ref :which-key "roam insert")
      "mi" '(bibtex-actions-insert-citation :which-key "insert citation"))
  
  
    (use-package org-roam
      :after org
      ;; default from github :hook (org-load .org-roam-mode)
      :config
      (setq org-roam-directory gwbrck/roam)
      (setq org-roam-title-sources '((alias title headline)))
      (setq org-roam-dailies-capture-templates
            '(("i" "Idee" entry
               #'org-roam-capture--get-point
               "* %?"
               :file-name "daily/%<%Y-%m-%d>"
               :head "#+title: %<%Y-%m-%d>\n"
               :olp ("Idee"))
              ("m" "Meeting" entry
               #'org-roam-capture--get-point
               "* %?"
               :file-name "daily/%<%Y-%m-%d>-Meeting-%^{Thema (short)}"
               :head "#+title: Meeting Notes vom %<%d.%m.%Y> zu %^{Thema (long)}\n#+date:  %<%d.%m.%Y>\n")
              ("j" "journal" entry
               #'org-roam-capture--get-point
               "* %?"
               :file-name "daily/%<%Y-%m-%d>"
               :head "#+title: %<%Y-%m-%d>\n"
               :olp ("Journal"))))
      (setq org-roam-capture-templates
            '(("d" "default" plain (function org-roam--capture-get-point)
               "%?"
               :file-name "%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}\" (current-time) t)"
               :head "#+title: ${title}\n"
               :unnarrowed t)
              ("p" "projekte" plain (function org-roam-capture--get-point)
               :file-name "Projekte/${slug}"
               :head "#+title: ${title}\n#+created: %(format-time-string \"[%Y-%m-%d %H:%M]\")\n\n%?"
               :unnarrowed t))))
  
    (use-package org-roam-bibtex
      :after (org-roam)
      :hook (org-roam-mode . org-roam-bibtex-mode)
      :config
  
    (setq orb-preformat-keywords
          '("citekey" "title" "url" "author-or-editor" "keywords" "file")
          orb-process-file-field t
          orb-file-field-extensions "pdf")
  
    (setq orb-templates
          '(("r" "ref" plain (function org-roam-capture--get-point)
             ""
             :file-name "Konspekte/${citekey}"
             :head "#+TITLE: Konspekt von ${citekey}\n#+ROAM_KEY: ${ref}
  
    - tags ::
    - keywords :: ${keywords}\n\n* Konspekt
    :PROPERTIES:
    :Custom_ID: ${citekey}
    :AUTHOR: ${author-or-editor}
    :NOTER_DOCUMENT: ${file}
    :NOTER_PAGE:
    :END:"))))
  
  
#+end_src

*** Custom bibcleanfunction
#+begin_src emacs-lisp
  (defun gwbrck/bibtex-dashes ()
      (let (bounds)
        (when (looking-at bibtex-entry-maybe-empty-head)
          (goto-char (match-end 0))
          (while (setq bounds (bibtex-parse-field))
            (goto-char (bibtex-start-of-field bounds))
            (if (and (member (bibtex-name-in-field bounds) '("pages" "Pages"))
                     (string-match "[0-9]-[0-9]" (bibtex-text-in-field-bounds bounds)))
                (save-restriction
                       (narrow-to-region (caar bounds) (nth 3 bounds))
                       (goto-char (point-min))
                       (while (search-forward "-" nil t)
                         (replace-match "--")))
              (goto-char (bibtex-end-of-field bounds)))))))

  (defun gwbrck/bibtex-journal ()
      (let (bounds)
        (when (looking-at bibtex-entry-maybe-empty-head)
          (goto-char (match-end 0))
          (while (setq bounds (bibtex-parse-field))
            (goto-char (bibtex-start-of-field bounds))
            (if (member (bibtex-name-in-field bounds) '("journal" "Journal"))
                (save-restriction
                       (narrow-to-region (caar bounds) (nth 3 bounds))
                       (goto-char (point-min))
                       (while (re-search-forward "^\s*journal" nil t)
                         (replace-match "journaltitle")))
              (goto-char (bibtex-end-of-field bounds)))))))

  (defun gwbrck/bibtex-abstract  ()
      (let (bounds)
        (when (looking-at bibtex-entry-maybe-empty-head)
          (goto-char (match-end 0))
          (while (setq bounds (bibtex-parse-field))
            (goto-char (bibtex-start-of-field bounds))
            (if (member (bibtex-name-in-field bounds) '("abstract" "Abstract"))
              (kill-region (caar bounds) (nth 3 bounds))
              (goto-char (bibtex-end-of-field bounds)))))))

  (defun gwbrck/bibtex-clean-entry (&optional x)
    (interactive)
    (save-excursion
      (save-restriction
       (bibtex-narrow-to-entry)
       (bibtex-beginning-of-entry)
       (gwbrck/bibtex-journal)
       (bibtex-beginning-of-entry)
       (gwbrck/bibtex-dashes)
       (bibtex-beginning-of-entry)
       (gwbrck/bibtex-abstract)))
       (bibtex-clean-entry 2))

#+end_src

** Latex Export
#+begin_src emacs-lisp
(add-to-list 'org-export-smart-quotes-alist 
            '("de-de"
              (primary-opening   :utf-8 "\"" :html "&ldquo;" :latex "\\enquote{"  :texinfo "``")
              (primary-closing   :utf-8 "\"" :html "&rdquo;" :latex "}"           :texinfo "''")
              (secondary-opening :utf-8 "'" :html "&lsquo;" :latex "\\enquote*{" :texinfo "`")
              (secondary-closing :utf-8 "'" :html "&rsquo;" :latex "}"           :texinfo "'")
              (apostrophe        :utf-8 "’" :html "&rsquo;")))
       (setq org-export-default-language "de-de")
       (setq org-export-with-smart-quotes t)
       (setq org-latex-pdf-process '("latexmk -shell-escape -bibtex -pdf %f"))
       (setq org-latex-default-class "article")
       (setq org-latex-default-packages-alist
        '(("utf8" "inputenc" t ("pdflatex"))
          ("T1" "fontenc" t ("pdflatex"))
          ("" "graphicx" t nil)
          ("" "grffile" t nil)
          ("" "longtable" nil nil)
          ("" "wrapfig" nil nil)
          ("" "rotating" nil nil)
          ("normalem" "ulem" t nil)
          ("" "amsmath" t nil)
          ("" "textcomp" t nil)
          ("" "amssymb" t nil)
          ("" "capt-of" nil nil)
          ("" "hyperref" nil nil)
          ("shorthands=off, ngerman" "babel" nil nil)
          ("" "csquotes" nil nil)
          ("style=apa, backend=biber, natbib=true" "biblatex" nil nil)
          "\\addbibresource{~/Documents/myBib/main.bib}"))

#+end_src

* Word Stuff
#+begin_src emacs-lisp
  (setq ispell-program-name "aspell"
        ispell-dictionary   "deutsch")
  
  
  (eval-after-load "flyspell"
    '(progn
       (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
       (define-key flyspell-mouse-map [mouse-3] #'undefined)))
  
#+End_src

* Development
** Languages

*** IDE Features with lsp-mode

**** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp

  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

#+end_src

**** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

**** consult-lsp
***** TODO configure github.com/gagbo/consult-lsp
#+begin_src emacs-lisp

  (use-package consult-lsp)

#+end_src


** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge)

#+end_src

#+RESULTS:

** Commenting

Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** ESS R
#+begin_src emacs-lisp
  (use-package ess
    :config
    (setq ess-use-eldoc nil)
    (setq ess-use-flymake nil) 
    )
#+end_src

* Terminals

** term-mode

=term-mode= is a built-in terminal emulator in Emacs.  Because it is written in Emacs Lisp, you can start using it immediately with very little configuration.  If you are on Linux or macOS, =term-mode= is a great choice to get started because it supports fairly complex terminal applications (=htop=, =vim=, etc) and works pretty reliably.  However, because it is written in Emacs Lisp, it can be slower than other options like =vterm=.  The speed will only be an issue if you regularly run console apps with a lot of output.

One important thing to understand is =line-mode= versus =char-mode=.  =line-mode= enables you to use normal Emacs keybindings while moving around in the terminal buffer while =char-mode= sends most of your keypresses to the underlying terminal.  While using =term-mode=, you will want to be in =char-mode= for any terminal applications that have their own keybindings.  If you're just in your usual shell, =line-mode= is sufficient and feels more integrated with Emacs.

With =evil-collection= installed, you will automatically switch to =char-mode= when you enter Evil's insert mode (press =i=).  You will automatically be switched back to =line-mode= when you enter Evil's normal mode (press =ESC=).

Run a terminal with =M-x term!=

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =C-c C-k= - Enter char-mode
- =C-c C-j= - Return to line-mode
- If you have =evil-collection= installed, =term-mode= will enter char mode when you use Evil's Insert mode

#+begin_src emacs-lisp

  (use-package term
    :config
    (setq explicit-shell-file-name "zsh") ;; Change this to zsh, etc
    ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

    ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

#+end_src

*** Better term-mode colors

The =eterm-256color= package enhances the output of =term-mode= to enable handling of a wider range of color codes so that many popular terminal applications look as you would expect them to.  Keep in mind that this package requires =ncurses= to be installed on your machine so that it has access to the =tic= program.  Most Linux distributions come with this program installed already so you may not have to do anything extra to use it.

#+begin_src emacs-lisp

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

** vterm

[[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal applications.  This enables it to be much faster than =term-mode= and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm= because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))

#+end_src

** shell-mode

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Interactive-Shell.html#Interactive-Shell][shell-mode]] is a middle ground between =term-mode= and Eshell.  It is *not* a terminal emulator so more complex terminal programs will not run inside of it.  It does have much better integration with Emacs because all command input in this mode is handled by Emacs and then sent to the underlying shell once you press Enter.  This means that you can use =evil-mode='s editing motions on the command line, unlike in the terminal emulator modes above.

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-shell-history= - A searchable history of commands typed into the shell

One advantage of =shell-mode= on Windows is that it's the only way to run =cmd.exe=, PowerShell, Git Bash, etc from within Emacs.  Here's an example of how you would set up =shell-mode= to run PowerShell on Windows:

#+begin_src emacs-lisp

  (when (eq system-type 'windows-nt)
    (setq explicit-shell-file-name "powershell.exe")
    (setq explicit-powershell.exe-args '()))

#+end_src

** Eshell

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs' own shell implementation written in Emacs Lisp.  It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc).  It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing =vim= to =find-file=).  Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don't work as well.  However, many of these limitations can be dealt with by good configuration and installing external packages, so don't let that discourage you from trying it!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell

We will be covering Eshell more in future videos highlighting other things you can do with it.

For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
- https://ambrevar.xyz/emacs-eshell/index.html
- https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

#+begin_src emacs-lisp

  (defun efs/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt)

  (use-package eshell
    :hook (eshell-first-time-mode . efs/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'powerline))


#+end_src

* File Management
** Custom
#+begin_src emacs-lisp
(setq default-directory "~/")
#+end_src
** Dired

*** Configuration

#+begin_src emacs-lisp

  (use-package dired
    :straight nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single)

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src

